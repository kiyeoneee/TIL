(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{416:function(t,s,a){"use strict";a.r(s);var n=a(42),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"spring의-생성자-주입-방법들에는-뭐가-있을까"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring의-생성자-주입-방법들에는-뭐가-있을까"}},[t._v("#")]),t._v(" Spring의 생성자 주입 방법들에는 뭐가 있을까?")]),t._v(" "),a("blockquote",[a("p",[t._v("처음 스프링을 사용하면서 "),a("code",[t._v("@Autowired")]),t._v(" 어노테이션을 사용해서 의존성을 주입했는데, 어느날 공식 문서를 읽어보니 생성자를 이용해서 주입하라는 안내가 있다는 것을 발견했다.\nSpring 바보는... 이 안내만으로 무엇이 문제인지 파악이 되지 않아 내용을 정리해보려 한다.")])]),t._v(" "),a("h2",{attrs:{id:"의존성-주입-방법"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#의존성-주입-방법"}},[t._v("#")]),t._v(" 의존성 주입 방법")]),t._v(" "),a("h3",{attrs:{id:"필드-주입-autowired"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#필드-주입-autowired"}},[t._v("#")]),t._v(" 필드 주입 ( @Autowired )")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Component")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Zoo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Autowired")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Zookeeper")]),t._v(" zookeeper"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ul",[a("li",[t._v("생성자, 필드, 세터에 붙일 수 있음")]),t._v(" "),a("li",[t._v("문제점\n"),a("ul",[a("li",[t._v("의존성 주입이 쉬워지면서 단일 책임의 원칙을 위반하기 쉬움\n생성자로 의존성을 주입하게 되면 생성자의 parameter가 많아질 때 가시적인 리팩토링 신호가 된다. 하지만 타입으로만 생성자를 주입하기 때문에 같은 클래스의 빈이 2가지가 있으면 에러가 발생할 수 있음")]),t._v(" "),a("li",[t._v("주입된 객체가 null일 경우 컴파일 시에 잡아낼 수 없다. 이는 런타임시에 NullPointerException을 낼 수 있음")]),t._v(" "),a("li",[t._v("클래스 이름이 같으면 에러가 생길 수 있음")])])])]),t._v(" "),a("br"),t._v(" "),a("h3",{attrs:{id:"setter-주입"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#setter-주입"}},[t._v("#")]),t._v(" Setter 주입")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Component")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Zoo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Zookeeper")]),t._v(" zookeeper"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  \n  "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Autowired")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setZookeeper")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Zookeeper")]),t._v(" zookeeper"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("zookeeper "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" zookeeper"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("br"),t._v("\n### 생성자 주입\n"),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Component")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Zoo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Zookeeper")]),t._v(" zookeeper"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  \n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Zoo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Zookeeper")]),t._v(" zookeeper"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("zookeeper "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" zookeeper"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ul",[a("li",[t._v("최근 Spring에서 권장하는 사용법\nSpring 4.3부터 단일 생성자를 가진 클래스는 @Autowired 어노테이션 생략 가능")]),t._v(" "),a("li",[t._v("컴파일 시에 많은 문제를 잡을 수 있음\n"),a("ul",[a("li",[t._v("주입된 객체가 Null이거나, 의존 관계가 주입되지 않은 경우 객체 생성이 불가능하여 런타임시 에러를 줄일 수 있음")])])]),t._v(" "),a("li",[t._v("유일하게 순환 참조를 막을 수 있음")]),t._v(" "),a("li",[t._v("테스트 코드를 작성하기 좋음\n"),a("ul",[a("li",[t._v("DI 컨테이너를 사용하지 않고도 클래스를 인스턴스화 할 수 있어 테스트가 용이함")])])]),t._v(" "),a("li",[t._v("Lombok을 활용한 Constructor Injection도 가능")]),t._v(" "),a("li",[a("strong",[t._v("@AllArgsConstructor")]),t._v(" : 모든 필드에 대한 생성자 생성\n"),a("ul",[a("li",[a("strong",[t._v("@RequiredArgsConstructor")]),t._v(" : final 키워드가 붙은 필드에 대한 생성자 생성")])])]),t._v(" "),a("li",[t._v("AllArgsConstructor와 다르게 final로 선언되어 단 한번만 초기화되고 변경될 여지가 없음")])])])}),[],!1,null,null,null);s.default=e.exports}}]);